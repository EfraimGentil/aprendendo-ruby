
#declaring a array
puts "So you can declare a new array in the following way"
puts "@your_array = []"
puts "---------------------------------------------------"
puts "You can initialize a array:"
puts "@your_array = [1 , 2 , 3]"
puts "to acess a element: (arrays position starts at 0)"
puts "@your_array[0]  #1"
puts "Acess first and last element"
puts "@your_array.first #1"
puts "@your_array.last  #3"
puts "---------------------------------------------------"
puts "Manipulating arrays"
puts "You can add a new element to the end of the list   "
puts "@your_array << 4"
puts "@your_array.last #4"
puts "As ruby is a dinamic lenguage, you can add any type"
puts "to the array"
puts "@your_array << \"Hello\" #[1, 2, 3, 4, 4, \"Hllo\"]"
puts "---------------------------------------------------"
puts "Creating a array of strings"
puts "Can be done at the same way of the other example   "
puts "@your_array = [ 'Hello' , 'World' ]"
puts "Can be done in a diferent way with %w{phrase} it   "
puts "will contains a phrase and break in each space     "
puts "@your_array = %w{Hello World} #['Hello', 'World']  "
puts "You can also use %W to interpolation of values in  "
puts "the phrase   "
puts "name = 'Efraim'"
puts '@your_array = %W{Hello #{name}} #["Hello", "Efraim"]'
puts "---------------------------------------------------"
puts "Array of array"
puts "You cand have a array of arrays like this" 
puts "@a = [ [1,2,3] ,[4,5,6] ]"
puts "And you want to extract the values in a single array"
puts "the array object have a mettod to do so"
puts "puts @a.flatten #[1, 2, 3, 4, 5, 6]"
puts "it is recursive, if you have more than one array "
puts "inside other array will recusively join all m like that:"
puts "@a = [ [1,2,3] ,[4,5,6] , [ [7,8,9] , [10,11,12] ] ]"
puts "puts @a.flatten #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
puts "---------------------------------------------------"
puts "You can go through the array with the each function"
puts "@a = [ 1, 2 , 3 , 4]"
ptus "@a.each{ |n| #where n is each element of the array"
puts " puts n"
puts "}"
puts "The each function also returns a the same array   "
puts "@b = @a.each{ |n| puts n }"
puts "So the be will receive the value of @a "
puts "But if you want to change the values of the array in the return"
puts "you can use the collect/map method"
puts "@b = @a.collect{ |n| n + 1  }"
puts "@b #[2,3,4,5]"
puts "@b = @a.map{ |n| n + 1  }"
puts "@b #[2,3,4,5]"